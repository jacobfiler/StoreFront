@model StoreFrontLab.DATA.EF.Product

@{
    ViewBag.Title = "Create";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
<div class="col-md-10 offset-1 custom-formatting">

    <div class="form-horizontal">
        <h4>Add Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group row">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>

        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.ProductType, "ProductType", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownList("ProductType", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
            </div>
            @Html.LabelFor(model => model.VendorID, "VendorID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownList("VendorID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VendorID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control textarea" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>



        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.ProductImage, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.EditorFor(model => model.ProductImage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductImage, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class=" no-color">
            <input type="submit" value="Create" class="btn btn-outline-success" />
            <div class="float-right" style="margin-top: 15px;">@Html.ActionLink("Back to List", "Index")</div>
        </div>
    </div>
    </div>
    }

    <div style="margin-top: 30px;">
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
